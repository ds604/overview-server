# Routes
# This file defines all application routes (Higher priority routes first).
# They're grouped by controller.

GET    / controllers.WelcomeController.show()

GET    /help controllers.HelpController.show()

GET    /login  controllers.SessionController.new_()
POST   /login  controllers.SessionController.create()
GET    /logout controllers.SessionController.delete()

GET    /confirm controllers.ConfirmationController.show(token: String ?= "")

GET    /register controllers.UserController.new_()
POST   /register controllers.UserController.create()

GET    /reset-password        controllers.PasswordController.new_()
POST   /reset-password        controllers.PasswordController.create()
GET    /reset-password/:token controllers.PasswordController.edit(token)
POST   /reset-password/:token controllers.PasswordController.update(token)

GET    /documents/:id.json           controllers.DocumentController.showJson(id: Long)
GET    /documents/:id                controllers.DocumentController.show(id: Long)
GET    /documents/:id/contents/:oid  controllers.DocumentController.contents(id: Long, oid: Long)

HEAD   /uploads/:uuid        controllers.UploadController.show(uuid: java.util.UUID)
POST   /uploads/:uuid        controllers.UploadController.create(uuid: java.util.UUID)
POST   /uploads/:uuid/finish controllers.UploadController.startClustering(uuid: java.util.UUID)

POST   /files/finish  controllers.MassUploadController.startClustering()
HEAD   /files/:guid   controllers.MassUploadController.show(guid: java.util.UUID)
POST   /files/:guid   controllers.MassUploadController.create(guid: java.util.UUID)
DELETE /files         controllers.MassUploadController.cancelUpload()

GET    /imports.json controllers.ImportJobController.index()

POST   /imports/documentcloud              controllers.DocumentCloudImportJobController.create()
GET    /imports/documentcloud/new/:query    controllers.DocumentCloudImportJobController.new_(query: String)
POST   /imports/clone/:sourceDocumentSetId controllers.CloneImportJobController.create(sourceDocumentSetId: Long)

# Routes that relate to a DocumentSet
GET    /documentsets                  controllers.DocumentSetController.index(page: Int ?= 1)
GET    /documentsets/:id.json         controllers.DocumentSetController.showJson(id: Long)
GET    /documentsets/:id              controllers.DocumentSetController.show(id: Long)
DELETE /documentsets/:id              controllers.DocumentSetController.delete(id: Long)
PUT    /documentsets/:id              controllers.DocumentSetController.update(id: Long)

GET    /documentsets/:id/users.json   controllers.DocumentSetUserController.indexJson(id: Long)
POST   /documentsets/:id/users        controllers.DocumentSetUserController.create(id: Long)
DELETE /documentsets/:id/users/:email controllers.DocumentSetUserController.delete(id: Long, email: String)

GET    /documentsets/:id/documents controllers.DocumentListController.index(id: Long, nodes: String ?= "", tags: String ?= "", documents: String ?= "", searchResults: String ?= "", untagged: Boolean ?= false, pageSize: Int ?= 20, page: Int ?= 1)

GET    /documentsets/:id/export                                controllers.DocumentSetExportController.index(id: Long)
GET    /documentsets/:id/export/documents-with-string-tags.csv controllers.DocumentSetExportController.documentsWithStringTags(id: Long)
GET    /documentsets/:id/export/documents-with-column-tags.csv controllers.DocumentSetExportController.documentsWithColumnTags(id: Long)

GET    /documentsets/:id/tree/nodes         controllers.NodeController.index(id: Long)
GET    /documentsets/:id/tree/nodes/:nodeId controllers.NodeController.show(id: Long, nodeId: Long)
POST   /documentsets/:id/tree/nodes/:nodeId controllers.NodeController.update(id: Long, nodeId: Long)

POST   /documentsets/:id/log-entries/create-many              controllers.LogEntryController.createMany(id: Long)
GET    /documentsets/:id/log-entries$extension<\.csv|\.html|> controllers.LogEntryController.index(id: Long, extension: String)

PUT    /documentsets/:id/tags/:tagId             controllers.TagController.update(id: Long, tagId: Long)
DELETE /documentsets/:id/tags/:tagId             controllers.TagController.delete(id: Long, tagId: Long)
GET    /documentsets/:id/tags.csv                controllers.TagController.indexCsv(id: Long)
GET    /documentsets/:id/tags.json               controllers.TagController.indexJson(id: Long)
POST   /documentsets/:id/tags                    controllers.TagController.create(id: Long)
POST   /documentsets/:id/tags/:tagId/add         controllers.TagController.add(id: Long, tagId: Long)
POST   /documentsets/:id/tags/:tagId/remove      controllers.TagController.remove(id: Long, tagId: Long)
# We POST the "nodes" parameter here because it can be large; but conceptually this is GET.
POST   /documentsets/:id/tags/:tagId/node-counts controllers.TagController.nodeCounts(id: Long, tagId: Long)

POST   /documentsets/:id/searches controllers.SearchController.create(id: Long)

GET    /documentsets/:id/search-results                             controllers.SearchResultController.index(id: Long)
POST   /documentsets/:id/search-results/:searchResultId/node-counts controllers.SearchResultController.nodeCounts(id: Long, searchResultId: Long)

GET    /documentsets/:id/error-list              controllers.DocumentProcessingErrorController.index(id: Long)

# Routes for public document sets
GET    /public-document-sets                     controllers.PublicDocumentSetController.index()

# Routes for shared document sets
GET    /shared-document-sets                     controllers.SharedDocumentSetController.index()

# Routes for browsers that dont' support CORS
# really GET, but with hidden password
POST   /documentcloud-proxy/projects.json controllers.DocumentCloudProxyController.projects()

# Admin section
GET    /admin/users     controllers.admin.UserController.index()
POST   /admin/users/:id controllers.admin.UserController.update(id: Long)
DELETE /admin/users/:id controllers.admin.UserController.delete(id: Long)

GET    /admin/imports        controllers.admin.ImportJobController.index()
DELETE /admin/imports/:jobId controllers.admin.ImportJobController.delete(jobId: Long)

# Map static resources from the /public folder to the /assets URL path
GET    /assets/*file controllers.Assets.at(path="/public", file)
GET    /robots.txt   controllers.Assets.at(path="/public", file="robots.txt")
