# Routes
# This file defines all application routes (Higher priority routes first).
# They're grouped by controller.

GET    / controllers.WelcomeController.show()

GET    /help controllers.HelpController.show()

GET    /login  controllers.SessionController.new_()
POST   /login  controllers.SessionController.create()
GET    /logout controllers.SessionController.delete()

GET    /confirm controllers.ConfirmationController.show(token: String ?= "")

GET    /register controllers.UserController.new_()
POST   /register controllers.UserController.create()

GET    /reset-password        controllers.PasswordController.new_()
POST   /reset-password        controllers.PasswordController.create()
GET    /reset-password/:token controllers.PasswordController.edit(token)
POST   /reset-password/:token controllers.PasswordController.update(token)

GET    /documents/:id controllers.DocumentController.show(id: Long)

HEAD   /uploads/:uuid controllers.UploadController.show(uuid: UUID)
POST   /uploads/:uuid controllers.UploadController.create(uuid: UUID)

# Routes that relate to a DocumentSet
GET    /documentsets          controllers.DocumentSetController.index()
POST   /documentsets          controllers.DocumentSetController.create()
GET    /documentsets/:id.json controllers.DocumentSetController.showJson(id: Long)
GET    /documentsets/:id      controllers.DocumentSetController.show(id: Long)
DELETE /documentsets/:id      controllers.DocumentSetController.delete(id: Long)
PUT    /documentsets/:id      controllers.DocumentSetController.update(id: Long)

POST   /documentsets/create/clone                controllers.DocumentSetController.createClone()

GET    /documentsets/:id/documents controllers.DocumentListController.index(id: Long, nodes: String ?= "", tags: String ?= "", documents: String ?= "", start: Int ?= 0, end: Int ?= 20)

GET    /documentsets/:id/tree/nodes         controllers.NodeController.index(id: Long)
GET    /documentsets/:id/tree/nodes/:nodeId controllers.NodeController.show(id: Long, nodeId: Long)
POST   /documentsets/:id/tree/nodes/:nodeId controllers.NodeController.update(id: Long, nodeId: Long)

POST   /documentsets/:id/log-entries/create-many controllers.LogEntryController.createMany(id: Long)
GET    /documentsets/:id/log-entries$extension<\.csv|\.html|> controllers.LogEntryController.index(id: Long, extension: String)

POST   /documentsets/:id/tags/:tagId             controllers.TagController.update(id: Long, tagId: Long)
DELETE /documentsets/:id/tags/:tagId             controllers.TagController.delete(id: Long, tagId: Long)
POST   /documentsets/:id/tags                    controllers.TagController.create(id: Long)
POST   /documentsets/:id/tags/:tagId/add         controllers.TagController.add(id: Long, tagId: Long)

POST   /documentsets/:id/tags/:tagId/node-counts controllers.TagController.nodeCounts(id: Long, tagId: Long, nodes: String ?= "")

GET    /documentsets/:id/error-list              controllers.DocumentProcessingErrorController.index(id: Long)

# Routes for public document sets
GET    /public-document-sets                     controllers.PublicDocumentSetController.index() 

# Routes for browsers that dont' support CORS
# really GET, but with hidden password
POST   /documentcloud-proxy/projects.json controllers.DocumentCloudProxyController.projects()

# Admin section
GET    /admin/users     controllers.admin.UserController.index()
POST   /admin/users/:id controllers.admin.UserController.update(id: Long)
DELETE /admin/users/:id controllers.admin.UserController.delete(id: Long)

GET    /admin/jobs controllers.admin.DocumentSetCreationJobController.index()

# Map static resources from the /public folder to the /assets URL path
GET    /assets/*file controllers.Assets.at(path="/public", file)
